// Noise Generation Algorithm taken from "The Book of Shaders"
// https://thebookofshaders.com/11/

#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "/Engine/Private/ScreenPass.ush"
#include "/Engine/Private/PostProcessCommon.ush"

float4 Color;
float2 ScreenDimensions;
RWTexture2D<float4> OutputTexture;

// 2D Random
float random(in float2 st)
{
    return frac(sin(dot(st.xy,
                         float2(12.9898, 78.233)))
                 * 43758.5453123);
}

// 2D Noise based on Morgan McGuire @morgan3d
// https://www.shadertoy.com/view/4dS3Wd
float noise(in float2 st)
{
    float2 i = floor(st);
    float2 f = frac(st);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + float2(1.0, 0.0));
    float c = random(i + float2(0.0, 1.0));
    float d = random(i + float2(1.0, 1.0));

    // Smooth Interpolation

    // Cubic Hermine Curve.  Same as SmoothStep()
    float2 u = f * f * (3.0 - 2.0 * f);
    // u = smoothstep(0.,1.,f);

    // Mix 4 coorners percentages
    return lerp(a, b, u.x) +
            (c - a) * u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

[numthreads(8, 8, 1)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
    if (DispatchThreadId.x >= ScreenDimensions.x || DispatchThreadId.y >= ScreenDimensions.y)
	return;

    float2 st = DispatchThreadId.xy / ScreenDimensions.xy;
    float2 pos = float2(st * 5.0);
    
    float n = noise(pos);
    
    OutputTexture[DispatchThreadId.xy] = float4(float3(n, n, n), 1.0);
}